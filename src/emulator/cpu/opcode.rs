use super::instruction::*;
use super::address_mode::*;

pub struct Opcode {
    pub address_mode: AddressMode,
    pub instruction: Instruction,
    pub cycles: u8
}

impl Opcode {
    fn new(instruction: Instruction, address_mode: AddressMode, cycles: u8) -> Opcode {
        Opcode {
            instruction,
            address_mode,
            cycles
        }
    }
    fn new_invalid() -> Opcode {
        Opcode {
            instruction: Instruction::Invalid,
            address_mode: AddressMode::Invalid,
            cycles: 0u8
        }
    }
}

pub fn opcode_mapper(code: u8) -> Opcode {
    use Instruction::*;
    use AddressMode::*;
    match code {
        0x00 => Opcode::new(BRK, Imp,  0),
        0x01 => Opcode::new(ORA, IndX, 6),
        0x05 => Opcode::new(ORA, Zpg,  3),
        0x06 => Opcode::new(ASL, Zpg,  5),
        0x08 => Opcode::new(PHP, Imp,  3),
        0x09 => Opcode::new(ORA, Imm,  2),
        0x0A => Opcode::new(ASL, Acc,  2),
        0x0D => Opcode::new(ORA, Abs,  4),
        0x0E => Opcode::new(ASL, Abs,  6),
        0x10 => Opcode::new(BPL, Rel,  2),
        0x11 => Opcode::new(ORA, IndY, 5),
        0x15 => Opcode::new(ORA, ZpgX, 4),
        0x16 => Opcode::new(ASL, ZpgX, 6),
        0x18 => Opcode::new(CLC, Imp,  2),
        0x19 => Opcode::new(ORA, AbsY, 4),
        0x1D => Opcode::new(ORA, AbsX, 4),
        0x1E => Opcode::new(ASL, AbsX, 7),
        0x20 => Opcode::new(JSR, Abs,  6),
        0x21 => Opcode::new(AND, IndX, 6),
        0x24 => Opcode::new(BIT, Zpg,  3),
        0x25 => Opcode::new(AND, Zpg,  3),
        0x26 => Opcode::new(ROL, Zpg,  5),
        0x28 => Opcode::new(PLP, Imp,  4),
        0x29 => Opcode::new(AND, Imm,  2),
        0x2A => Opcode::new(ROL, Acc,  2),
        0x2C => Opcode::new(BIT, Abs,  4),
        0x2D => Opcode::new(AND, Abs,  4),
        0x2E => Opcode::new(ROL, Abs,  6),
        0x30 => Opcode::new(BMI, Rel,  2),
        0x31 => Opcode::new(AND, IndY, 5),
        0x35 => Opcode::new(AND, ZpgX, 4),
        0x36 => Opcode::new(ROL, ZpgX, 6),
        0x38 => Opcode::new(SEC, Imp,  2),
        0x39 => Opcode::new(AND, AbsY, 4),
        0x3D => Opcode::new(AND, AbsX, 4),
        0x3E => Opcode::new(ROL, AbsX, 7),
        0x40 => Opcode::new(RTI, Imp,  6),
        0x41 => Opcode::new(EOR, IndX, 6),
        0x45 => Opcode::new(EOR, Zpg,  3),
        0x46 => Opcode::new(LSR, Zpg,  5),
        0x48 => Opcode::new(PHA, Imp,  3),
        0x49 => Opcode::new(EOR, Imm,  2),
        0x4A => Opcode::new(LSR, Acc,  2),
        0x4C => Opcode::new(JMP, Abs,  3),
        0x4D => Opcode::new(EOR, Abs,  4),
        0x4E => Opcode::new(LSR, Abs,  6),
        0x50 => Opcode::new(BVC, Rel,  2),
        0x51 => Opcode::new(EOR, IndY, 5),
        0x55 => Opcode::new(EOR, ZpgX, 4),
        0x56 => Opcode::new(LSR, ZpgX, 6),
        0x58 => Opcode::new(CLI, Imp,  2),
        0x59 => Opcode::new(EOR, AbsY, 4),
        0x5D => Opcode::new(EOR, AbsX, 4),
        0x5E => Opcode::new(LSR, AbsX, 7),
        0x60 => Opcode::new(RTS, Imp,  6),
        0x61 => Opcode::new(ADC, IndX, 6),
        0x65 => Opcode::new(ADC, Zpg,  3),
        0x66 => Opcode::new(ROR, Zpg,  5),
        0x68 => Opcode::new(PLA, Imp,  4),
        0x69 => Opcode::new(ADC, Imm,  2),
        0x6A => Opcode::new(ROR, Acc,  2),
        0x6C => Opcode::new(JMP, Ind,  5),
        0x6D => Opcode::new(ADC, Abs,  4),
        0x6E => Opcode::new(ROR, Abs,  6),
        0x70 => Opcode::new(BVS, Rel,  2),
        0x71 => Opcode::new(ADC, IndY, 5),
        0x75 => Opcode::new(ADC, ZpgX, 4),
        0x76 => Opcode::new(ROR, ZpgX, 6),
        0x78 => Opcode::new(SEI, Imp,  2),
        0x79 => Opcode::new(ADC, AbsY, 4),
        0x7D => Opcode::new(ADC, AbsX, 4),
        0x7E => Opcode::new(ROR, AbsX, 7),
        0x81 => Opcode::new(STA, IndX, 6),
        0x84 => Opcode::new(STY, Zpg,  3),
        0x85 => Opcode::new(STA, Zpg,  3),
        0x86 => Opcode::new(STX, Zpg,  3),
        0x88 => Opcode::new(DEY, Imp,  2),
        0x8A => Opcode::new(TXA, Imp,  2),
        0x8C => Opcode::new(STY, Abs,  4),
        0x8D => Opcode::new(STA, Abs,  4),
        0x8E => Opcode::new(STX, Abs,  4),
        0x90 => Opcode::new(BCC, Rel,  2),
        0x91 => Opcode::new(STA, IndY, 6),
        0x94 => Opcode::new(STY, ZpgX, 4),
        0x95 => Opcode::new(STA, ZpgX, 4),
        0x96 => Opcode::new(STX, ZpgY, 4),
        0x98 => Opcode::new(TYA, Imp,  2),
        0x99 => Opcode::new(STA, AbsY, 5),
        0x9A => Opcode::new(TXS, Imp,  2),
        0x9D => Opcode::new(STA, AbsX, 5),
        0xA0 => Opcode::new(LDY, Imm,  2),
        0xA1 => Opcode::new(LDA, IndX, 6),
        0xA2 => Opcode::new(LDX, Imm,  2),
        0xA4 => Opcode::new(LDY, Zpg,  3),
        0xA5 => Opcode::new(LDA, Zpg,  3),
        0xA6 => Opcode::new(LDX, Zpg,  3),
        0xA8 => Opcode::new(TAY, Imp,  2),
        0xA9 => Opcode::new(LDA, Imm,  2),
        0xAA => Opcode::new(TAX, Imp,  2),
        0xAC => Opcode::new(LDY, Abs,  4),
        0xAD => Opcode::new(LDA, Abs,  4),
        0xAE => Opcode::new(LDX, Abs,  4),
        0xB0 => Opcode::new(BCS, Rel,  2),
        0xB1 => Opcode::new(LDA, IndY, 5),
        0xB4 => Opcode::new(LDY, ZpgX, 4),
        0xB5 => Opcode::new(LDA, ZpgX, 4),
        0xB6 => Opcode::new(LDX, ZpgY, 4),
        0xB8 => Opcode::new(CLV, Imp,  2),
        0xB9 => Opcode::new(LDA, AbsY, 4),
        0xBA => Opcode::new(TSX, Imp,  2),
        0xBC => Opcode::new(LDY, AbsX, 4),
        0xBD => Opcode::new(LDA, AbsX, 4),
        0xBE => Opcode::new(LDX, AbsY, 4),
        0xC0 => Opcode::new(CPY, Imm,  2),
        0xC1 => Opcode::new(CMP, IndX, 6),
        0xC4 => Opcode::new(CPY, Zpg,  3),
        0xC5 => Opcode::new(CMP, Zpg,  3),
        0xC6 => Opcode::new(DEC, Zpg,  5),
        0xC8 => Opcode::new(INY, Imp,  2),
        0xC9 => Opcode::new(CMP, Imm,  2),
        0xCA => Opcode::new(DEX, Imp,  2),
        0xCC => Opcode::new(CPY, Abs,  4),
        0xCD => Opcode::new(CMP, Abs,  4),
        0xCE => Opcode::new(DEC, Abs,  6),
        0xD0 => Opcode::new(BNE, Rel,  2),
        0xD1 => Opcode::new(CMP, IndY, 5),
        0xD5 => Opcode::new(CMP, ZpgX, 4),
        0xD6 => Opcode::new(DEC, ZpgX, 6),
        0xD8 => Opcode::new(CLD, Imp,  2),
        0xD9 => Opcode::new(CMP, AbsY, 4),
        0xDD => Opcode::new(CMP, AbsX, 4),
        0xDE => Opcode::new(DEC, AbsX, 7),
        0xE0 => Opcode::new(CPX, Imm,  2),
        0xE1 => Opcode::new(SBC, IndX, 6),
        0xE4 => Opcode::new(CPX, Zpg,  3),
        0xE5 => Opcode::new(SBC, Zpg,  3),
        0xE6 => Opcode::new(INC, Zpg,  5),
        0xE8 => Opcode::new(INX, Imp,  2),
        0xE9 => Opcode::new(SBC, Imm,  2),
        0xEA => Opcode::new(NOP, Imp,  2),
        0xEC => Opcode::new(CPX, Abs,  4),
        0xED => Opcode::new(SBC, Abs,  4),
        0xEE => Opcode::new(INC, Abs,  6),
        0xF0 => Opcode::new(BEQ, Rel,  2),
        0xF1 => Opcode::new(SBC, IndY, 5),
        0xF5 => Opcode::new(SBC, ZpgX, 4),
        0xF6 => Opcode::new(INC, ZpgX, 6),
        0xF8 => Opcode::new(SED, Imp,  2),
        0xF9 => Opcode::new(SBC, AbsY, 4),
        0xFD => Opcode::new(SBC, AbsX, 4),
        0xFE => Opcode::new(INC, AbsX, 7),
        _    => Opcode::new_invalid()
    }
}




enum Instruction {
    INVALID,
    ADC, AND, ASL, BCC, BCS, BEQ, BIT, 
    BMI, BNE, BPL, BRK, BVC, BVS, CLC,
    CLD, CLI, CLV, CMP, CPX, CPY, DEC,
    DEX, DEY, EOR, INC, INX, INY, JMP,
    JSR, LDA, LDX, LDY, LSR, NOP, ORA,
    PHA, PHP, PLA, PLP, ROL, ROR, RTI,
    RTS, SBC, SEC, SED, SEI, STA, STX,
    STY, TAX, TAY, TSX, TXA, TXS, TYA,
}
use Instruction::*;

enum AddressMode {
    INVALID,
    abs, abs_x, abs_y, // Absolute  (indexed)
    ind, ind_x, ind_y, // Indirect  (indexed)
    zpg, zpg_x, zpg_y, // Zero page (indexed)
    imp, // Implied
    rel, // Relative
    acc, // Accumulator
    imm // Immediate
}
use AddressMode::*;


struct Opcode {
    code: u8,
    address_mode: AddressMode,
    instruction: Instruction
}

impl Opcode {
    fn new(address_mode: AddressMode = AddressMode::INVALID, instruction: Instruction = Instruction::INVALID, cycles: u8 = 0) -> Opcode {
        Opcode {
            address_mode,
            instruction,
            cycles
        }
    }

    fn new_invalid(code: u8) -> Opcode {
        Opcode {
            AddressMode::INVALID,
            Instruction::INVALID,
            0
        }
    }
}

fn opcode_mapper(code: u8) -> Opcode {
    match code {
        0x00 => Opcode(BRK, imp,   0),
        0x01 => Opcode(ORA, ind_x, 6),
        0x05 => Opcode(ORA, zpg,   3),
        0x06 => Opcode(ASL, zpg,   5),
        0x08 => Opcode(PHP, imp,   3),
        0x09 => Opcode(ORA, imm,   2),
        0x0A => Opcode(ASL, acc,   2),
        0x0D => Opcode(ORA, abs,   4),
        0x0E => Opcode(ASL, abs,   6),
        0x10 => Opcode(BPL, rel,   2),
        0x11 => Opcode(ORA, ind_y, 5),
        0x15 => Opcode(ORA, zpg_x, 4),
        0x16 => Opcode(ASL, zpg_x, 6),
        0x18 => Opcode(CLC, imp,   2),
        0x19 => Opcode(ORA, abs_y, 4),
        0x1D => Opcode(ORA, abs_x, 4),
        0x1E => Opcode(ASL, abs_x, 7),
        0x20 => Opcode(JSR, abs,   6),
        0x21 => Opcode(AND, ind_x, 6),
        0x24 => Opcode(BIT, zpg,   3),
        0x25 => Opcode(AND, zpg,   3),
        0x26 => Opcode(ROL, zpg,   5),
        0x28 => Opcode(PLP, imp,   4),
        0x29 => Opcode(AND, imm,   2),
        0x2A => Opcode(ROL, acc,   2),
        0x2C => Opcode(BIT, abs,   4),
        0x2D => Opcode(AND, abs,   4),
        0x2E => Opcode(ROL, abs,   6),
        0x30 => Opcode(BMI, rel,   2),
        0x31 => Opcode(AND, ind_y, 5),
        0x35 => Opcode(AND, zpg_x, 4),
        0x36 => Opcode(ROL, zpg_x, 6),
        0x38 => Opcode(SEC, imp,   2),
        0x39 => Opcode(AND, abs_y, 4),
        0x3D => Opcode(AND, abs_x, 4),
        0x3E => Opcode(ROL, abs_x, 7),
        0x40 => Opcode(RTI, imp,   6),
        0x41 => Opcode(EOR, ind_x, 6),
        0x45 => Opcode(EOR, zpg,   3),
        0x46 => Opcode(LSR, zpg,   5),
        0x48 => Opcode(PHA, imp,   3),
        0x49 => Opcode(EOR, imm,   2),
        0x4A => Opcode(LSR, acc,   2),
        0x4C => Opcode(JMP, abs,   3),
        0x4D => Opcode(EOR, abs,   4),
        0x4E => Opcode(LSR, abs,   6),
        0x50 => Opcode(BVC, rel,   2),
        0x51 => Opcode(EOR, ind_y, 5),
        0x55 => Opcode(EOR, zpg_x, 4),
        0x56 => Opcode(LSR, zpg_x, 6),
        0x58 => Opcode(CLI, imp,   2),
        0x59 => Opcode(EOR, abs_y, 4),
        0x5D => Opcode(EOR, abs_x, 4),
        0x5E => Opcode(LSR, abs_x, 7),
        0x60 => Opcode(RTS, imp,   6),
        0x61 => Opcode(ADC, ind_x, 6),
        0x65 => Opcode(ADC, zpg,   3),
        0x66 => Opcode(ROR, zpg,   5),
        0x68 => Opcode(PLA, imp,   4),
        0x69 => Opcode(ADC, imm,   2),
        0x6A => Opcode(ROR, acc,   2),
        0x6C => Opcode(JMP, ind,   5),
        0x6D => Opcode(ADC, abs,   4),
        0x6E => Opcode(ROR, abs,   6),
        0x70 => Opcode(BVS, rel,   2),
        0x71 => Opcode(ADC, ind_y, 5),
        0x75 => Opcode(ADC, zpg_x, 4),
        0x76 => Opcode(ROR, zpg_x, 6),
        0x78 => Opcode(SEI, imp,   2),
        0x79 => Opcode(ADC, abs_y, 4),
        0x7D => Opcode(ADC, abs_x, 4),
        0x7E => Opcode(ROR, abs_x, 7),
        0x81 => Opcode(STA, ind_x, 6),
        0x84 => Opcode(STY, zpg,   3),
        0x85 => Opcode(STA, zpg,   3),
        0x86 => Opcode(STX, zpg,   3),
        0x88 => Opcode(DEY, imp,   2),
        0x8A => Opcode(TXA, imp,   2),
        0x8C => Opcode(STY, abs,   4),
        0x8D => Opcode(STA, abs,   4),
        0x8E => Opcode(STX, abs,   4),
        0x90 => Opcode(BCC, rel,   2),
        0x91 => Opcode(STA, ind_y, 6),
        0x94 => Opcode(STY, zpg_x, 4),
        0x95 => Opcode(STA, zpg_x, 4),
        0x96 => Opcode(STX, zpg_y, 4),
        0x98 => Opcode(TYA, imp,   2),
        0x99 => Opcode(STA, abs_y, 5),
        0x9A => Opcode(TXS, imp,   2),
        0x9D => Opcode(STA, abs_x, 5),
        0xA0 => Opcode(LDY, imm,   2),
        0xA1 => Opcode(LDA, ind_x, 6),
        0xA2 => Opcode(LDX, imm,   2),
        0xA4 => Opcode(LDY, zpg,   3),
        0xA5 => Opcode(LDA, zpg,   3),
        0xA6 => Opcode(LDX, zpg,   3),
        0xA8 => Opcode(TAY, imp,   2),
        0xA9 => Opcode(LDA, imm,   2),
        0xAA => Opcode(TAX, imp,   2),
        0xAC => Opcode(LDY, abs,   4),
        0xAD => Opcode(LDA, abs,   4),
        0xAE => Opcode(LDX, abs,   4),
        0xB0 => Opcode(BCS, rel,   2),
        0xB1 => Opcode(LDA, ind_y, 5),
        0xB4 => Opcode(LDY, zpg_x, 4),
        0xB5 => Opcode(LDA, zpg_x, 4),
        0xB6 => Opcode(LDX, zpg_y, 4),
        0xB8 => Opcode(CLV, imp,   2),
        0xB9 => Opcode(LDA, abs_y, 4),
        0xBA => Opcode(TSX, imp,   2),
        0xBC => Opcode(LDY, abs_x, 4),
        0xBD => Opcode(LDA, abs_x, 4),
        0xBE => Opcode(LDX, abs_y, 4),
        0xC0 => Opcode(CPY, imm,   2),
        0xC1 => Opcode(CMP, ind_x, 6),
        0xC4 => Opcode(CPY, zpg,   3),
        0xC5 => Opcode(CMP, zpg,   3),
        0xC6 => Opcode(DEC, zpg,   5),
        0xC8 => Opcode(INY, imp,   2),
        0xC9 => Opcode(CMP, imm,   2),
        0xCA => Opcode(DEX, imp,   2),
        0xCC => Opcode(CPY, abs,   4),
        0xCD => Opcode(CMP, abs,   4),
        0xCE => Opcode(DEC, abs,   6),
        0xD0 => Opcode(BNE, rel,   2),
        0xD1 => Opcode(CMP, ind_y, 5),
        0xD5 => Opcode(CMP, zpg_x, 4),
        0xD6 => Opcode(DEC, zpg_x, 6),
        0xD8 => Opcode(CLD, imp,   2),
        0xD9 => Opcode(CMP, abs_y, 4),
        0xDD => Opcode(CMP, abs_x, 4),
        0xDE => Opcode(DEC, abs_x, 7),
        0xE0 => Opcode(CPX, imm,   2),
        0xE1 => Opcode(SBC, ind_x, 6),
        0xE4 => Opcode(CPX, zpg,   3),
        0xE5 => Opcode(SBC, zpg,   3),
        0xE6 => Opcode(INC, zpg,   5),
        0xE8 => Opcode(INX, imp,   2),
        0xE9 => Opcode(SBC, imm,   2),
        0xEA => Opcode(NOP, imp,   2),
        0xEC => Opcode(CPX, abs,   4),
        0xED => Opcode(SBC, abs,   4),
        0xEE => Opcode(INC, abs,   6),
        0xF0 => Opcode(BEQ, rel,   2),
        0xF1 => Opcode(SBC, ind_y, 5),
        0xF5 => Opcode(SBC, zpg_x, 4),
        0xF6 => Opcode(INC, zpg_x, 6),
        0xF8 => Opcode(SED, imp,   2),
        0xF9 => Opcode(SBC, abs_y, 4),
        0xFD => Opcode(SBC, abs_x, 4),
        0xFE => Opcode(INC, abs_x, 7),
        _    => Opcode()
    }
}
